generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  verified           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  profile   Profile?
  ResetPasswordToken ResetPasswordToken[]
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expires   DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)  
}

model Profile {
  id           Int      @id @default(autoincrement())
  name         String?
  location     String?
  profilePhoto String?
  availability String?
  isPublic     Boolean  @default(true)
  role         Role     @default(USER)
  createdAt    DateTime @default(now())

  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])

  offeredSkills OfferedSkill[]
  wantedSkills  WantedSkill[]
  sentRequests     SwapRequest[]   @relation("SentRequests")
  receivedRequests SwapRequest[]   @relation("ReceivedRequests")
  feedbacksGiven   Feedback[]      @relation("GivenFeedbacks")
  feedbacksReceived Feedback[]     @relation("ReceivedFeedbacks")
}

model Skill {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  category     String?

  offeredByProfiles OfferedSkill[]
  wantedByProfiles  WantedSkill[]

  @@index([name])
}

model OfferedSkill {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int
}

model WantedSkill {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int
}

model SwapRequest {
  id             Int      @id @default(autoincrement())
  fromProfile    Profile  @relation("SentRequests", fields: [fromProfileId], references: [id])
  fromProfileId  Int

  toProfile      Profile  @relation("ReceivedRequests", fields: [toProfileId], references: [id])
  toProfileId    Int

  offeredSkill   String
  requestedSkill String
  status         SwapStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Feedback {
  id          Int     @id @default(autoincrement())
  fromProfile Profile @relation("GivenFeedbacks", fields: [fromProfileId], references: [id])
  fromProfileId Int

  toProfile   Profile @relation("ReceivedFeedbacks", fields: [toProfileId], references: [id])
  toProfileId Int

  rating      Int     // 1 to 5
  comment     String?
  createdAt   DateTime @default(now())
}

model AdminActionLog {
  id           Int      @id @default(autoincrement())
  adminId      Int
  action       String
  targetUser   Int?
  targetSwap   Int?
  createdAt    DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
