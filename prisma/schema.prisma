generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  createdAt          DateTime             @default(now())
  verified           Boolean              @default(false)
  profile            Profile?
  ResetPasswordToken ResetPasswordToken[]
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id                Int            @id @default(autoincrement())
  name              String?
  location          String?
  profilePhoto      String?
  availability      String?
  isPublic          Boolean        @default(true)
  role              Role           @default(USER)
  createdAt         DateTime       @default(now())
  userId            Int            @unique
  feedbacksGiven    Feedback[]     @relation("GivenFeedbacks")
  feedbacksReceived Feedback[]     @relation("ReceivedFeedbacks")
  receivedMessages  Message[]      @relation("ReceivedMessages")
  sentMessages      Message[]      @relation("SentMessages")
  offeredSkills     OfferedSkill[]
  user              User           @relation(fields: [userId], references: [id])
  sentRequests      SwapRequest[]  @relation("SentRequests")
  receivedRequests  SwapRequest[]  @relation("ReceivedRequests")
  wantedSkills      WantedSkill[]
}

model Skill {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  category          String?
  offeredByProfiles OfferedSkill[]
  wantedByProfiles  WantedSkill[]

  @@index([name])
}

model OfferedSkill {
  id        Int     @id @default(autoincrement())
  profileId Int
  skillId   Int
  profile   Profile @relation(fields: [profileId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])
}

model WantedSkill {
  id        Int     @id @default(autoincrement())
  profileId Int
  skillId   Int
  profile   Profile @relation(fields: [profileId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])
}

model SwapRequest {
  id             Int        @id @default(autoincrement())
  fromProfileId  Int
  toProfileId    Int
  offeredSkill   String
  requestedSkill String
  status         SwapStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  message        String
  fromProfile    Profile    @relation("SentRequests", fields: [fromProfileId], references: [id])
  toProfile      Profile    @relation("ReceivedRequests", fields: [toProfileId], references: [id])
}

model Feedback {
  id            Int      @id @default(autoincrement())
  fromProfileId Int
  toProfileId   Int
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  fromProfile   Profile  @relation("GivenFeedbacks", fields: [fromProfileId], references: [id])
  toProfile     Profile  @relation("ReceivedFeedbacks", fields: [toProfileId], references: [id])
}

model AdminActionLog {
  id         Int      @id @default(autoincrement())
  adminId    Int
  action     String
  targetUser Int?
  targetSwap Int?
  createdAt  DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  timestamp  DateTime @default(now())
  read       Boolean  @default(false)
  receiver   Profile  @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     Profile  @relation("SentMessages", fields: [senderId], references: [id])

  @@index([senderId, receiverId])
  @@index([timestamp])
}

enum Role {
  USER
  ADMIN
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
